diff --git a/lib/history/History.js b/lib/history/History.js
index 3ce3cb30cc226162887aa31c3be9ee5e3ec82d26..33d994e105aa2bf2fea44bb56a9829db08048962 100644
--- a/lib/history/History.js
+++ b/lib/history/History.js
@@ -1,7 +1,7 @@
-import HistoryScrollRestorationEnum from './HistoryScrollRestorationEnum.js';
-import * as PropertySymbol from '../PropertySymbol.js';
 import BrowserFrameURL from '../browser/utilities/BrowserFrameURL.js';
 import DOMExceptionNameEnum from '../exception/DOMExceptionNameEnum.js';
+import * as PropertySymbol from '../PropertySymbol.js';
+import HistoryScrollRestorationEnum from './HistoryScrollRestorationEnum.js';
 /**
  * History API.
  *
@@ -81,6 +81,11 @@ export default class History {
         if (!this.#window.closed) {
             this.#browserFrame?.goBack();
         }
+        this.#window.dispatchEvent(
+            new PopStateEvent("popstate", {
+                state: history.state,
+            }),
+        );
     }
     /**
      * Goes to the next page in session history.
diff --git a/src/history/History.ts b/src/history/History.ts
index f004f8682f2b2a998a424d233ec9ec3415a9a032..f0f825d6b94467053b5111556823f39edb898c70 100644
--- a/src/history/History.ts
+++ b/src/history/History.ts
@@ -1,10 +1,10 @@
 import IBrowserFrame from '../browser/types/IBrowserFrame.js';
-import HistoryScrollRestorationEnum from './HistoryScrollRestorationEnum.js';
-import * as PropertySymbol from '../PropertySymbol.js';
-import IHistoryItem from './IHistoryItem.js';
 import BrowserFrameURL from '../browser/utilities/BrowserFrameURL.js';
 import DOMExceptionNameEnum from '../exception/DOMExceptionNameEnum.js';
+import * as PropertySymbol from '../PropertySymbol.js';
 import BrowserWindow from '../window/BrowserWindow.js';
+import HistoryScrollRestorationEnum from './HistoryScrollRestorationEnum.js';
+import IHistoryItem from './IHistoryItem.js';
 
 /**
  * History API.
@@ -89,12 +89,30 @@ export default class History {
 		}
 	}
 
+	/**
+	 * Dispatches a popstate event.
+	 *
+	 * @param state State to include in the event.
+	 */
+	#dispatchPopStateEvent(state: object | null): void {
+		if (!this.#window.closed) {
+			const event = new this.#window.PopStateEvent('popstate', {
+				bubbles: false,
+				cancelable: false,
+				// @ts-ignore
+				state: state
+			});
+			this.#window.dispatchEvent(event);
+		}
+	}
+
 	/**
 	 * Goes to the previous page in session history.
 	 */
 	public back(): void {
 		if (!this.#window.closed) {
 			this.#browserFrame?.goBack();
+			this.#dispatchPopStateEvent(this.#currentHistoryItem.state);
 		}
 	}
 
@@ -104,6 +122,7 @@ export default class History {
 	public forward(): void {
 		if (!this.#window.closed) {
 			this.#browserFrame?.goForward();
+			this.#dispatchPopStateEvent(this.#currentHistoryItem.state);
 		}
 	}
 
@@ -116,6 +135,7 @@ export default class History {
 	public go(delta: number): void {
 		if (!this.#window.closed) {
 			this.#browserFrame?.goSteps(delta);
+			this.#dispatchPopStateEvent(this.#currentHistoryItem.state);
 		}
 	}
 
